// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4914.PantherBot;

import org.usfirst.frc4914.PantherBot.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc4914.PantherBot.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton a;
    public JoystickButton b;
    public Joystick driverJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        driverJoystick = new Joystick(0);
        
        b = new JoystickButton(driverJoystick, 2);
        b.whileHeld(new DriveInvert());
        a = new JoystickButton(driverJoystick, 1);
        a.whileHeld(new DriveToggle());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Drive", new Drive());
        SmartDashboard.putData("Drive Invert", new DriveInvert());
        SmartDashboard.putData("Drive Toggle", new DriveToggle());
        SmartDashboard.putData("Turn 90 CW", new Turn90CW());
        SmartDashboard.putData("Turn 90 CCW", new Turn90CCW());
        SmartDashboard.putData("Turn 180 CW", new Turn180CW());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriverJoystick() {
        return driverJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    
    /**
     * Returns the driver joytick's left Y axis value
     * 
     * @return the driver joytick's left Y axis value
     */
    public double getDriverJoystickLeft() {
    	return driverJoystick.getRawAxis(1);
    }
    
    /**
     * Returns the driver joytick's right Y axis value
     * 
     * @return the driver joytick's right Y axis value
     */
    public double getDriverJoystickRight() {
    	return driverJoystick.getRawAxis(5);
    }
    
    /**
     * Returns the driver joytick's POV value
     * 
     * @return the driver joytick's POV value 
     * -1 if nothing is pressed, incrementing in degrees CW
     */
    public int getDriverJoystickPOV() {
    	return driverJoystick.getPOV(0);
    }
    
    /**
     * Returns if the driver joystick's right trigger is pressed
     * 
     * @return if the driver joystick's right trigger is pressed
     */
    public boolean isDriverJoystickRightTriggerPressed() {
    	return driverJoystick.getRawAxis(3) > 0.25;
    }
}

