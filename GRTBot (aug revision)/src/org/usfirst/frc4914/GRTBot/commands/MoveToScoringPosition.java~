// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4914.GRTBot.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4914.GRTBot.Robot;

/**
 *
 */
public class MoveToScoringPosition extends Command {
	 /** collection of areas from Robot.java */
    double[] areas;
    /** collection of centerXs from Robot.java */
    double[] centerXs;
    /** collection of centerYs from Robot.java */
    double[] centerYs;
    /** pair of area and respective index */
    double[] largest = new double[2];
    /** area of largest contour */
    double area;
    /** centerX of largest contour */
    double centerX;
    /** centerY of largest contour */
    double centerY;
    /** width (X) of image */
    int widthX = 320;
    /** height (Y) of image */
    int heightY = 240;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public MoveToScoringPosition() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	// udpate NetworkTable values
    	Robot.getNetworkTableValues();
    	areas = Robot.areas;
    	centerXs = Robot.centerXs;
    	centerYs = Robot.centerYs;
    	
    	/* 
    	 * determine index of data for largest contour by comparing area to 
    	 * first element in the pair (largest), and if the area is greater than 
    	 * before, the new area its respective index are stored in the pair.
    	 */
    	largest[0] = 0;
    	for (int i = 0; i < areas.length; i++) {
    		if (areas[i] > largest[0]) {
    			largest[0] = areas[i];
    			largest[1] = i;
    		}
    	}
    	
    	/*
    	 * assign values of largest contour's data
    	 */
    	area = areas[(int) largest[1]];
    	centerX = centerXs[(int) largest[1]];
    	centerY = centerYs[(int) largest[1]];
    	
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
