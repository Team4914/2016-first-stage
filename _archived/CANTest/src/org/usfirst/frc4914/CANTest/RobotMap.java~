// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4914.CANTest;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Victor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Encoder forkLiftQuadratureEncoder1;
    public static CANTalon forkLiftCANTalon1;
    public static CANTalon forkLiftCANTalon2;
    public static SpeedController forkLiftSpeedController1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        forkLiftQuadratureEncoder1 = new Encoder(0, 1, true, EncodingType.k4X);
        LiveWindow.addSensor("Fork Lift", "Quadrature Encoder 1", forkLiftQuadratureEncoder1);
        forkLiftQuadratureEncoder1.setDistancePerPulse(1.0);
        forkLiftQuadratureEncoder1.setPIDSourceType(PIDSourceType.kDisplacement);
        forkLiftCANTalon1 = new CANTalon(1);
        LiveWindow.addActuator("Fork Lift", "CAN Talon 1", forkLiftCANTalon1);
        
        forkLiftCANTalon2 = new CANTalon(2);
        LiveWindow.addActuator("Fork Lift", "CAN Talon 2", forkLiftCANTalon2);
        
        forkLiftSpeedController1 = new Victor(7);
        LiveWindow.addActuator("Fork Lift", "Speed Controller 1", (Victor) forkLiftSpeedController1);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
