// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4914.PantherBot;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.image.BinaryImage;
import edu.wpi.first.wpilibj.image.ColorImage;
import edu.wpi.first.wpilibj.image.NIVisionException;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.vision.AxisCamera;

import org.usfirst.frc.team4914.robot.Robot;
import org.usfirst.frc4914.PantherBot.commands.*;
import org.usfirst.frc4914.PantherBot.subsystems.*;

import com.ni.vision.NIVision;
import com.ni.vision.NIVision.DrawMode;
import com.ni.vision.NIVision.Image;
import com.ni.vision.NIVision.ParticleFilterCriteria2;
import com.ni.vision.NIVision.ShapeMode;
import com.ni.vision.NIVision.Point;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static Shooter shooter;
    public static Forklift forklift;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	// not in use (as of mattamy)
    public static int autoPosition = 0;
	// camera code
	CameraServer server;
	
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        shooter = new Shooter();
        forklift = new Forklift();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        oi = new OI();

        // sets up camera server
        server = CameraServer.getInstance();
        server.setQuality(25);
        try { server.startAutomaticCapture("cam0"); }
        catch (Exception e1) { 
        	try { server.startAutomaticCapture("cam1"); }
        	catch (Exception e2) { }
        }
        
        // sets forklift motors to brake
        Robot.forklift.setBrake(true);
        
        camera.writeMaxFPS(20);
        camera.writeCompression(30);
        camera.writeResolution(AxisCamera.Resolution.k640x480);
    }
    

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){
    	
    }
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
    	// adds sequential defense command
    	CommandGroup foobar = new AutonomousCommand();
    	
    	foobar.addSequential(new DEFENSEBD());
    	// foobar.addSequential(new AUTO2toGoal());
    	
    	autonomousCommand = foobar;
    	
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        
    	/*
    	 * Shooter Intake
    	 */
    	if (Robot.oi.isDriverJoystickLeftTriggerPressed()) {
        	Robot.shooter.setIntakeSpeed(1);
    	}
    	else {
    		Robot.shooter.stopIntake();
    	}
    	
    	/*
    	 * Right trigger close shoot
    	 */
    	if (Robot.oi.isDriverJoystickRightTriggerPressed()) {
        	Robot.shooter.setFlySpeed(Shooter.closeTopFly, Shooter.closeBottomFly);
    	}
    	else {
    		Robot.shooter.stopFly();
    	}
    	
    	/*
    	 * 
    	 */
    	if (Robot.oi.isShooterJoystickRightTriggerPressed()) {
    	}
    	else {
    	}

    	/*
    	 * 
    	 */
    	if (Robot.oi.isShooterJoystickLeftTriggerPressed()) {
    	}
    	else {
    	}
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
    
    /*
     * image rec code
     */
    
    public void processImage() {
    	ColorImage image = null;
    	BinaryImage thresholdImage = null;
    	BinaryImage bigObjectsImage = null;
    	BinaryImage convexHullImage = null;
    	BinaryImage filteredImage = null;
    	ParticleFilterCriteria2[] cc = new ParticleFilterCriteria2[2];
    	
    	cc[0] = new ParticleFilterCriteria2(NIVision.MeasurementType.MT_BOUNDING_RECT_WIDTH, 30, 400, 0, 0);
    	cc[1] = new ParticleFilterCriteria2(NIVision.MeasurementType.MT_BOUNDING_RECT_HEIGHT, 40, 400, 0, 0);
    	
    	try {
    		image = camera.getImage();
    		thresholdImage = image.thresholdHSV(111, 149, 222, 255, 91, 255);
    		bigObjectsImage = thresholdImage.removeSmallObjects(false, 2);
    		convexHullImage = bigObjectsImage.convexHull(false);
    		filteredImage = convexHullImage.particleFilter(cc);
    		reports = filteredImage.getOrderedParticleAnalysisReports(1);
    		// for (int i = 0; i <= reports.length; i++) {
    			System.out.println("Center of mass x: " + reports[0].center_mass_x);
    			System.out.println("Center of mass y: " + reports[0].center_mass_y);
    			System.out.println("Bounding rect width: " + reports[0].boundingRectWidth);
    			System.out.println("Bounding rect height: " + reports[0].boundingRectHeight);
    			
    			double distance;
    			double Tft = 2.66;
    			double FOVpixel = cameraPixelHeight;
    			double Tpixel = 2 * 85;
    			
    			distance = Tft * FOVpixel / (2 * Tpixel * Math.tan(51));
    			
    			System.out.println("Distance To Target: " + distance);
    			
    			// 49 degrees optimal vertical FOV for M1013
    			// 51 degrees according to manual tech specs
    			// 67 degrees horizontal according to manual tech specs
    			// 37.4 degrees optimal vertcal FOV for M1011
    			
    			System.out.println("Centered: " + isCentered());
    			
    		// }
    	}
    	catch (Exception e) { }
    	
    	try {
        	image.free();
        	thresholdImage.free();
        	bigObjectsImage.free();
        	convexHullImage.free();
        	filteredImage.free();
    	}
    	catch (NIVisionException e) { }
    } // end of method processImage()
    
    public boolean isCentered() {		
		double midpoint = cameraPixelHeight / 2;
		double epsilon = 50;
		return reports[0].center_mass_x < midpoint + epsilon &&
			   reports[0].center_mass_x > midpoint - epsilon;
    }
    
    public void centerRobot() {
    	// 30 degrees left and right
    	// Robot.driveTrain.rotateCW(30);
    	// Robot.driveTrain.rotateCCW(60);
    	
    	// 30 degrees CW
    	
    	double initialBearing = Robot.driveTrain.gyro.getAngle();
     	double finalBearing = initialBearing + 30;
     	
     	initialBearing += 360;
     	initialBearing %= 360;
     	finalBearing += 360;
     	finalBearing %= 360;
     	
     	Robot.driveTrain.resetGyro();
     	
       	while (!(Robot.driveTrain.gyro.getAngle() > finalBearing - Robot.driveTrain.ANGLE_EPSILON && 
       			Robot.driveTrain.gyro.getAngle() < finalBearing + Robot.driveTrain.ANGLE_EPSILON)) {
       		
       		Robot.driveTrain.setLeftVictor(1);
 	      	Robot.driveTrain.setRightVictor(-1);
 	      	
 	      	processImage();
 	      	if (isCentered()) { return; }
       	}
       	Robot.driveTrain.stop();
       	
       	// 60 degrees CCW
       	
       	initialBearing = Robot.driveTrain.gyro.getAngle();
    	finalBearing = initialBearing - 60;
    	
    	initialBearing += 360;
    	initialBearing %= 360;
    	finalBearing += 360;
    	finalBearing %= 360;
     	
     	Robot.driveTrain.resetGyro();
    	
      	while (!(Robot.driveTrain.gyro.getAngle() > finalBearing - Robot.driveTrain.ANGLE_EPSILON && 
      			Robot.driveTrain.gyro.getAngle() < finalBearing + Robot.driveTrain.ANGLE_EPSILON)) {
      		Robot.driveTrain.setLeftVictor(-1);
      		Robot.driveTrain.setRightVictor(1);
      		
      		processImage();
      		if (isCentered()) { return; }
      	}
      	
      	Robot.driveTrain.stop();
    }
}
