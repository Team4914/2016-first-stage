// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4914.PantherBot.subsystems;

import org.usfirst.frc4914.PantherBot.Robot;
import org.usfirst.frc4914.PantherBot.RobotMap;
import org.usfirst.frc4914.PantherBot.commands.*;

import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.Victor;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController rightDrive = RobotMap.driveTrainRightDrive;
    private final SpeedController leftDrive = RobotMap.driveTrainLeftDrive;
    private final AnalogGyro gyro = RobotMap.driveTrainGyro;
    private final AnalogInput ultra = RobotMap.driveTrainUltra;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new Drive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    /*
     * DRIVE CONSTANTS
     */
 	public boolean isTankDrive = true;	// if drive is tank drive
 	public boolean isInvertedDrive = false;	// if controls are inverted or not
 	public final double speedMultiplier = 0.9;	// speed limit multiplier
 	
 	// BEGIN CUSTOM CODE
     
 	/**
 	 * Sets speed for left victor drive at a specified speed. Speed will be toned 
 	 * down by the specified speed multiplier.
 	 * @param speed the speed to set the left victor to
 	 */
     public void setLeftVictor(double speed) {
     	leftDrive.set(speed * speedMultiplier);
     }
     
     /**
  	 * Sets speed for right victor drive at a specified speed. Speed will be toned 
  	 * down by the specified speed multiplier. *This victor is inverted
  	 * @param speed the speed to set the right victor to
  	 */
     public void setRightVictor(double speed) {
     	rightDrive.set(-speed * speedMultiplier);
     }
     
     /**
      * Drives the robot straight at a specified speed.
      * @param speed speed to drive robot straight
      */
     public void driveStraight(double speed) {
     	setLeftVictor(speed);
     	setRightVictor(speed);
     }
     
     /**
      * Stops all victors involved in the drivetrain.
      */
     public void stop() {
     	driveStraight(0);
     }
     
     /**
      * Returns angular bearing of the gyrometer.
      * @return angular bearing of the gyrometer
      */
     public double getGyroBearing() {
    	 return gyro.getAngle();
     }
     
     /**
      * Drives robot to a specifed setpoint using PID 
      * @param setpoint
      */
     public void driveUntilSetpoint(double setpoint) {
    	 PIDController driveControlLeft = new PIDController(1, 0.001, 0.0, ultra, leftDrive);
    	 PIDController driveControlRight = new PIDController(-1, 0.001, 0.0, ultra, rightDrive);
    	 
    	 // limits output range percentage by speedMultiplier
    	 driveControlLeft.setOutputRange(0, 100 * speedMultiplier);
    	 driveControlRight.setOutputRange(0, 100 * speedMultiplier);
    	 
    	 // sets the setpoint of ultrasonic sensor
    	 driveControlLeft.setSetpoint(setpoint);
    	 driveControlRight.setSetpoint(setpoint);
    	 
    	 // enables PIDs
    	 driveControlLeft.enable();
    	 driveControlRight.enable();
    	 
    	 // frees PIDs
    	 driveControlLeft.free();
    	 driveControlRight.free();
     }
     
     public void rotateCW(double angle) {
    	 
    	if (angle == 0) { angle++; }
    	else if (angle == 360) { angle--; }
    	 
    	double initialBearing, finalBearing;
    	
     	initialBearing = getGyroBearing();
     	finalBearing = (initialBearing + angle) % 360;
     	
     	while (getGyroBearing() != finalBearing) {
	      	setLeftVictor(1);
	      	setRightVictor(-1);
      	}
      	
      	stop();
     }
     
     public void rotateCCW(double angle) {
    	 
     	if (angle == 0) { angle++; }
     	else if (angle == 360) { angle--; }
     	
    	double initialBearing, finalBearing;
     	
      	initialBearing = getGyroBearing();
      	finalBearing = (initialBearing + 360 - angle) % 360;
      	
      	while (getGyroBearing() != finalBearing) {
	      	setLeftVictor(-1);
	      	setRightVictor(1);
      	}
      	
      	stop();
     }
     
     // END CUSTOM CODE
}

