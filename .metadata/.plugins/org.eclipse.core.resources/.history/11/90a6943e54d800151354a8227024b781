// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4914.PantherBot;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc4914.PantherBot.commands.*;
import org.usfirst.frc4914.PantherBot.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    CameraServer server1;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static Shooter shooter;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SendableChooser defenseType, defensePos;
	public static int autoPosition = 0;
	
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        shooter = new Shooter();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        defenseType = new SendableChooser();
        defenseType.addObject("Portcullis", new DEFENSEPortcullis());
        defenseType.addObject("CDF", new DEFENSECDF());
        defenseType.addObject("Moat", new DEFENSEMoat());
        defenseType.addObject("Ramparts", new DEFENSERamparts());
        defenseType.addObject("Drawbridge", new DEFENSEDrawbridge());
        defenseType.addObject("Sally Port", new DEFENSESallyPort());
        defenseType.addObject("Rock Wall", new DEFENSERockWall());
        defenseType.addObject("Rough Terrain", new DEFENSERoughTerrain());
        SmartDashboard.putData("Autonomous Defense Types", defenseType);
        
        defensePos = new SendableChooser();
        defensePos.addObject("POS 2", new POS2());
        defensePos.addObject("POS 3", new POS3());
        defensePos.addObject("POS 4", new POS4());
        defensePos.addObject("POS 5", new POS5());
        SmartDashboard.putData("Autonomous Defense Position", defensePos);
        
        // adds camera server
        server1 = CameraServer.getInstance();
        server1.setQuality(50);
        //the camera name (ex "cam0") can be found through the roborio web interface
        server1.startAutomaticCapture("cam0");
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
    	// adds sequential defense command
    	CommandGroup foobar = new AutonomousCommand();
    	foobar.addSequential((Command)defenseType.getSelected());
    	
    	// adds sequential navigation/shoot
    	switch (autoPosition) {
    	case 2:
    		foobar.addSequential(new AUTO2toGoal());
    		break;
    	case 3:
    		foobar.addSequential(new AUTO3toGoal());
    		break;
    	case 4:
    		foobar.addSequential(new AUTO4toGoal());
    		break;
    	case 5:
    		foobar.addSequential(new AUTO5toGoal());
    		break;
    	} // end of switch (autoPosition)
    	
    	autonomousCommand = foobar;
    	
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
