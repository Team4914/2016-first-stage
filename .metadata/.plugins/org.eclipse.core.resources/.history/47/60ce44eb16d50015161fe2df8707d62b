// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4914.PantherBot.subsystems;

import org.usfirst.frc4914.PantherBot.RobotMap;
import org.usfirst.frc4914.PantherBot.commands.*;

import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.Victor;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController rightDrive = RobotMap.driveTrainRightDrive;
    private final SpeedController leftDrive = RobotMap.driveTrainLeftDrive;
    private final AnalogGyro gyro = RobotMap.driveTrainGyro;
    private final Ultrasonic ultra = RobotMap.driveTrainUltra;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new Drive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    /*
     * DRIVE CONSTANTS
     */
 	public boolean isTankDrive = true;	// if drive is tank drive
 	public boolean isInvertedDrive = false;	// if controls are inverted or not
 	public final double speedMultiplier = 0.7;	// speed limit multiplier
 	public static final double turn90Timeout = 0.9;	// time (in seconds) to turn 90 degrees
 	
 	// BEGIN CUSTOM CODE
     
     public void setLeftVictor(double speed) {
     	leftDrive.set(speed * speedMultiplier);
     }
     
     public void setRightVictor(double speed) {
     	rightDrive.set(-speed * speedMultiplier);
     }
     
     public void driveStraight(double speed) {
     	setLeftVictor(speed);
     	setRightVictor(speed);
     }
     
     public void stop() {
     	driveStraight(0);
     }
     
     public double getGyroBearing() {
    	 return gyro.getAngle();
     }
     
     /*
      * Drive PID controls 
      */
     
     public void driveUntilSetpoint(double setpoint) {
    	 PIDController driveControlLeft = new PIDController(0.1, 0.001, 0.0, ultra, leftDrive);
    	 PIDController driveControlRight = new PIDController(0.1, 0.001, 0.0, ultra, rightDrive);
    	 driveControlLeft.enable();
    	 driveControlRight.enable();
     }
     
     // END CUSTOM CODE
}

